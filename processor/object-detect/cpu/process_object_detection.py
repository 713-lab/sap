#########################################################
# @names process_object_detection.py
# @author Yen Chun Li
#
# @params input        Input Pulsar topic
# @params output       Output Pulsar topic
# @params url          Pulsar service url
# @params darknet_dir  The dir of darknet folder
# @params DEBUG        Debug mode when DEBUG=1, default=0
#
#########################################################
from YoloDetector import YoloDetector
import argparse
import cv2
import numpy as np
import pulsar
from pulsar import MessageId
from pulsar.schema import *
import time
import ast
import argparse

ap = argparse.ArgumentParser()
ap.add_argument("-i", "--input", required=True,
    help="pulsar topic to input raw video")
ap.add_argument("-o", "--output", required=True,
    help="pulsar topic to output processed video")
ap.add_argument("-u", "--pulsarUrl", required=True,
    help="url for pulsar broker")
ap.add_argument("-m", "--mode", default=0,
    help="m=0 tiny-yolov3, m=1 yolov3")
ap.add_argument("-d","--DEBUG", default=0,
    help="d=1 DEBUG yes")


args = vars(ap.parse_args())

INPUT_TOPIC = args['input']
OUTPUT_TOPIC = args['output']
PULSAR_URL = args['pulsarUrl']
MODE = int(args['mode'])
DEBUG = args['DEBUG']



class Frame(Record):
    timestamp = String()
    img = Bytes()

class YOLOFrame(Record):
    timestamp = String()
    processed_img = Bytes()
    detections = String()



############################################################
# 1. Connect to Pulsar and create 
# 2. Initial YoloDetector to use Yolov3
############################################################
client = pulsar.Client(PULSAR_URL)
if(DEBUG):	print("[Info] Create Client to " + PULSAR_URL)

reader = client.create_reader(
                                topic=INPUT_TOPIC,  
                                start_message_id=MessageId.latest, 
                                receiver_queue_size=5000,
                                schema=AvroSchema(Frame)
                                )

producer = client.create_producer(
                topic=OUTPUT_TOPIC,
                schema=AvroSchema(YOLOFrame))

yoloDetector = YoloDetector(yolo_dir="darknet", mode=MODE)

print("[Info] start sending data")

while True:
    #############################################################
    # Get Input Streaming data
    # 1. Read data from Pulsar
    # 2. Decode img from bytes to numpy.ndarray
    #############################################################
    prev = time.time()
    msg = reader.read_next()
    #print(msg.publish_timestamp())
    time1 = time.time()
    if(DEBUG): print("[Time] {} Pulsar read time".format(1/(time1-prev)))
    time2 = time.time()
    frame = cv2.imdecode(np.frombuffer(msg.value().img, np.uint8), -1)
    # Alternative decoding with mxnet.image
    #img_ndarray = mx.image.imdecode(msg.value().img)
    #frame = img_ndarray.asnumpy()
    time3 = time.time()
    if(DEBUG): print("[Time] {} imdecode from bytes to numpy.ndarray".format(1/(time3-time2)))
    #############################################################
    # Process image by yolo 
    # 1. Get the detections which generated by Yolov3
    # 2. Get the resized frame (416*416)
    #############################################################
    
    detections = yoloDetector.processImgByYolo(frame)
    frame = yoloDetector.frame_resized

    time2 = time.time()
    if(DEBUG): print("[Time] {} process time by yolo".format(1/(time2-time3)))
    #print(type(detections))
    #print(str(detections))
    #print(type(ast.literal_eval(str(detections))))
    
    ret, jpeg = cv2.imencode('.jpg', frame)
    _t = msg.value().timestamp
    _Y = YOLOFrame(timestamp=_t,
                    processed_img=jpeg.tobytes(),
                    detections=str(detections))
    producer.send(_Y)
    
    if(DEBUG): print("send data")
    time2 = time.time()
    if(DEBUG): print("[Time] {} send data to pulsar".format(1/(time2-time3)))
    print("{} {} {}".format(_t, 1/(time.time() - prev), INPUT_TOPIC))