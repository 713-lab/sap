#########################################################
# @names process_people_counting.py
# @author Chia Hsin Hsu
#
# @params input Input Pulsar topic
# @params output Output Pulsar topic
# @params url Pulsar service url
# @params darknet_dir the dir of darknet folder
# @params debug debug mode when debug=1, default=0
#
#########################################################
from illegalMotorDetector import illegalMotorDetector
import argparse
import cv2
import numpy as np
import pulsar
from pulsar import MessageId
from pulsar.schema import *
import time
import mxnet as mx
import ast
import configparser

class Frame(Record):
    timestamp = String()
    img = Bytes()

class TextFrame(Record):
    timestamp = String()
    people = String()

class YOLOFrame(Record):
    timestamp = String()
    processed_img = Bytes()
    detections = String()
  
ap = argparse.ArgumentParser()
ap.add_argument("-c", "--camera", required=True,
    help="select camera setting")

args = vars(ap.parse_args())

config = configparser.ConfigParser()
config.read(args['camera']+'.ini')

processor = config['processor']

############################################################
# 1. Connect to Pulsar and create 
# 2. Initial YoloDetector to use Yolov3
############################################################
debug = processor['debug']
client = pulsar.Client(processor['pulsar_url'])
if(debug):	print("[Info] Create Client to " + processor['pulsar_url'])

brickroad_poly = [ [float(processor['upper_left_x']) , float(processor['upper_left_y'])], [float(processor['lower_left_x']) , float(processor['lower_left_y'])], [float(processor['lower_right_x']) , float(processor['lower_right_y'])], [float(processor['upper_right_x']) , float(processor['upper_right_y'])]  ]
print("brickroad_poly:")
print(brickroad_poly)
brickroad_poly  = np.array([brickroad_poly ], dtype = np.int32)

reader = client.create_reader(
                                topic=processor['input_topic'],  
                                start_message_id=MessageId.latest, 
                                receiver_queue_size=5000,
                                schema=AvroSchema(YOLOFrame)
                                )

producer = client.create_producer(
                topic=processor['output_topic'],
                schema=AvroSchema(YOLOFrame))

producer2 = client.create_producer(
                topic=processor['output_topic2'],
                schema=AvroSchema(TextFrame))

# count_people = 0
# count = 0
# amount_of_people = 0

#isIllegalPark = False
motor_detect = 0
state = 0
print("[Info] start sending data")

while True:
    try:
        #############################################################
        # Get Input Streaming data
        # 1. Read data from Pulsar
        # 2. Decode img from bytes to numpy.ndarray
        #############################################################
        prev = time.time()
        msg = reader.read_next()
        #print(msg.publish_timestamp())
        time1 = time.time()
        if(debug): print("[Time] read from pulsar {}".format(1/(time1-prev)))
        time2 = time.time()
        #frame = cv2.imdecode(np.frombuffer(msg.value().img, np.uint8), -1)
        # Alternative decoding with mxnet.image
        detections = ast.literal_eval(msg.value().detections)
        img_ndarray = mx.image.imdecode(msg.value().processed_img)
        frame = img_ndarray.asnumpy()
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        time3 = time.time()
        if(debug): print("[Time] imdecode from bytes to numpy.ndarray{}".format(1/(time3-time2)))
        #############################################################
        # Process image by yolo 
        # 1. Get the detections which generated by Yolov3
        # 2. Get the resized frame (416*416)
        #############################################################
        (H, W) = frame.shape[:2]
        H = 864/416*1.8
        W = 1152/416*1.8

        
        #############################################################
        # Do illegal-parking detecting
        # 1. Initialize the variables (isIllegalPar) that detector needs
        # 2. Transform the park poly cordinates to proper size and draw it(because we change the size of frames)
        # 3. Iterating the detections and do illegal-parking detecting
        # 4. If detects illegal parking, set isIllegalPark = True and set the coverRatio
        # 5. Put object name and its bounding box on the frame
        #############################################################
        isIllegalPark = 0
        time2 = time.time()
        
        #sidewalk_poly = [[44.6854219949, 172.358056266], [0, 397.9130434783], [135.1202046036, 392.5933503836], [120.2250639386, 155.3350383632]]
        #sidewalk_poly = np.array([sidewalk_poly], dtype = np.int32)
        cv2.polylines(frame, brickroad_poly, True, (255,0,0),2)
        length_of_detections = len(detections)
        for detection in detections:
            object_name = detection[0].decode("utf-8") 
            if(debug): print(object_name)
            if(object_name != 'motorbike'):  continue
            x = detection[2]
            y = detection[3]
            w = detection[4]
            h = detection[5]
            xmin = int(round(x - (w / 2)))
            xmax = int(round(x + (w / 2)))
            ymin = int(round(y - (h / 2)))
            ymax = int(round(y + (h / 2)))
            #print(xmin, xmax, ymin, ymax)
            pt1 = (xmin, ymin)
            pt2 = (xmax, ymax)
            cv2.rectangle(frame, pt1, pt2, (0, 0, 255), 4)
            cv2.putText(frame,
                        detection[0].decode() +
                        " [" + str(round(detection[1] * 100, 2)) + "]",
                        (pt1[0], pt1[1] - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                        [0, 0, 255], 2)

            motor_detect = illegalMotorDetector.detect(brickroad_poly, (xmin+xmax)/2, (ymin+ymax)/2)
            if (motor_detect):
            	isIllegalPark = 1
        time3 = time.time()
        if(debug): print("[Time] detect {} in {} FPS".format(length_of_detections,1/(time3-time2)))

        if(state == 0):
            if(isIllegalPark): 
                state = 1
            else: state = 0
        elif(state <= 11):
            if(isIllegalPark): 
                state = state + 1
            else: state = state - 1
        else:
            if(isIllegalPark):
                state = 12
            else: state = 11
        if(isIllegalPark == 1): text = "isParking(motor): True"
        else : text = "isParking(motor): False"
        cv2.putText(frame, text, (10, 360), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 0, 0), 2)
        
        ret, jpeg = cv2.imencode('.jpg', frame)
        _t = msg.value().timestamp
        _Y = YOLOFrame(timestamp=_t,
                        processed_img=jpeg.tobytes(),
                        detections=str(isIllegalPark))

        _Text = TextFrame(timestamp=_t,
                            people=str(isIllegalPark))
        

        
        #cv2.imshow('motor', frame)
        
        producer.send(_Y)
        producer2.send(_Text)
        cv2.waitKey(1)

        print(f'Fps {time.asctime( time.localtime(time.time()) )} {1/(time.time() - prev)}')
        print("isParking(motor): ", isIllegalPark)
        #cv2.destroyAllWindows()
    except Exception as e:
        print(e)
        pass
